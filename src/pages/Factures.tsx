import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useToast } from "@/hooks/use-toast";
import { Plus, FileText, DollarSign } from "lucide-react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";

const invoiceSchema = z.object({
  vente_id: z.string().uuid().optional(),
  client_id: z.string().uuid(),
  type_facture: z.enum(['proforma', 'commerciale', 'regularisation']),
  montant_total: z.number().min(0),
  date_echeance: z.string().optional(),
  conditions_paiement: z.string().optional(),
  notes: z.string().optional(),
  lignes: z.array(z.object({
    description: z.string().min(1),
    quantite: z.number().min(0),
    prix_unitaire: z.number().min(0)
  })).min(1)
});

type InvoiceFormData = z.infer<typeof invoiceSchema>;

export default function Factures() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);

  const form = useForm<InvoiceFormData>({
    resolver: zodResolver(invoiceSchema),
    defaultValues: {
      type_facture: 'proforma',
      montant_total: 0,
      lignes: [{ description: '', quantite: 1, prix_unitaire: 0 }]
    }
  });

  // Fetch invoices with client data
  const { data: factures, isLoading } = useQuery({
    queryKey: ['factures'],
    queryFn: async () => {
      const { data: facturesData, error: facturesError } = await supabase
        .from('factures')
        .select('*')
        .order('created_at', { ascending: false });
      
      if (facturesError) throw facturesError;

      // Fetch client data separately
      const { data: clientsData, error: clientsError } = await supabase
        .from('clients')
        .select('id, nom');

      if (clientsError) throw clientsError;

      // Combine the data
      const facturesWithClients = facturesData.map(facture => {
        const client = clientsData.find(c => c.id === facture.client_id);
        return {
          ...facture,
          client_nom: client?.nom || 'Client inconnu'
        };
      });

      return facturesWithClients;
    }
  });

  // Fetch clients for dropdown
  const { data: clients } = useQuery({
    queryKey: ['clients'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('clients')
        .select('id, nom')
        .order('nom');
      
      if (error) throw error;
      return data;
    }
  });

  // Fetch sales for dropdown
  const { data: ventes } = useQuery({
    queryKey: ['ventes_for_invoices'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('ventes')
        .select(`
          id,
          volume,
          date_deal,
          navire:navires(nom, produit),
          client:clients(nom)
        `)
        .order('date_deal', { ascending: false });
      
      if (error) throw error;
      return data;
    }
  });

  const createInvoice = useMutation({
    mutationFn: async (data: InvoiceFormData) => {
      // Create invoice (numero_facture will be auto-generated by trigger)
      const { data: invoice, error: invoiceError } = await supabase
        .from('factures')
        .insert({
          numero_facture: '', // Will be auto-generated by trigger
          vente_id: data.vente_id || null,
          client_id: data.client_id,
          type_facture: data.type_facture,
          montant_total: data.montant_total,
          date_echeance: data.date_echeance || null,
          conditions_paiement: data.conditions_paiement,
          notes: data.notes
        })
        .select()
        .single();

      if (invoiceError) throw invoiceError;

      // Create invoice lines
      const lignes = data.lignes.map(ligne => ({
        facture_id: invoice.id,
        description: ligne.description,
        quantite: ligne.quantite,
        prix_unitaire: ligne.prix_unitaire,
        montant_ligne: ligne.quantite * ligne.prix_unitaire
      }));

      const { error: lignesError } = await supabase
        .from('lignes_facture')
        .insert(lignes);

      if (lignesError) throw lignesError;

      return invoice;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['factures'] });
      setIsCreateDialogOpen(false);
      form.reset();
      toast({ title: "Facture créée avec succès" });
    },
    onError: (error) => {
      toast({
        title: "Erreur lors de la création",
        description: error.message,
        variant: "destructive"
      });
    }
  });

  const onSubmit = (data: InvoiceFormData) => {
    createInvoice.mutate(data);
  };

  const getStatusBadge = (statut: string) => {
    const statusConfig = {
      brouillon: { label: "Brouillon", variant: "secondary" as const },
      envoyee: { label: "Envoyée", variant: "default" as const },
      payee: { label: "Payée", variant: "default" as const },
      annulee: { label: "Annulée", variant: "destructive" as const }
    };
    
    const config = statusConfig[statut as keyof typeof statusConfig];
    return <Badge variant={config.variant}>{config.label}</Badge>;
  };

  const getTypeBadge = (type: string) => {
    const typeConfig = {
      proforma: { label: "Proforma", variant: "outline" as const },
      commerciale: { label: "Commerciale", variant: "default" as const },
      regularisation: { label: "Régularisation", variant: "secondary" as const }
    };
    
    const config = typeConfig[type as keyof typeof typeConfig];
    return <Badge variant={config.variant}>{config.label}</Badge>;
  };

  const addLigne = () => {
    const currentLignes = form.getValues('lignes');
    form.setValue('lignes', [...currentLignes, { description: '', quantite: 1, prix_unitaire: 0 }]);
  };

  const removeLigne = (index: number) => {
    const currentLignes = form.getValues('lignes');
    if (currentLignes.length > 1) {
      form.setValue('lignes', currentLignes.filter((_, i) => i !== index));
    }
  };

  const updateMontantTotal = () => {
    const lignes = form.getValues('lignes');
    const total = lignes.reduce((sum, ligne) => sum + (ligne.quantite * ligne.prix_unitaire), 0);
    form.setValue('montant_total', total);
  };

  if (isLoading) {
    return <div className="p-6">Chargement...</div>;
  }

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold">Facturation</h1>
          <p className="text-muted-foreground">Gestion des factures proforma et commerciales</p>
        </div>
        
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="mr-2 h-4 w-4" />
              Nouvelle Facture
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>Créer une nouvelle facture</DialogTitle>
            </DialogHeader>
            
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="type_facture"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Type de facture</FormLabel>
                        <Select onValueChange={field.onChange} defaultValue={field.value}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="proforma">Proforma</SelectItem>
                            <SelectItem value="commerciale">Commerciale</SelectItem>
                            <SelectItem value="regularisation">Régularisation</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="client_id"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Client</FormLabel>
                        <Select onValueChange={field.onChange} value={field.value}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Sélectionner un client" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            {clients?.map((client) => (
                              <SelectItem key={client.id} value={client.id}>
                                {client.nom}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="vente_id"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Vente associée (optionnel)</FormLabel>
                        <Select onValueChange={field.onChange} value={field.value}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Sélectionner une vente" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            {ventes?.map((vente) => (
                              <SelectItem key={vente.id} value={vente.id}>
                                {vente.navire.nom} - {vente.navire.produit} ({vente.volume}T)
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="date_echeance"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Date d'échéance</FormLabel>
                        <FormControl>
                          <Input type="date" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <div className="space-y-4">
                  <div className="flex justify-between items-center">
                    <h3 className="text-lg font-semibold">Lignes de facture</h3>
                    <Button type="button" variant="outline" onClick={addLigne}>
                      Ajouter une ligne
                    </Button>
                  </div>
                  
                  {form.watch('lignes').map((_, index) => (
                    <div key={index} className="grid grid-cols-5 gap-2 items-end">
                      <FormField
                        control={form.control}
                        name={`lignes.${index}.description`}
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Description</FormLabel>
                            <FormControl>
                              <Input {...field} />
                            </FormControl>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name={`lignes.${index}.quantite`}
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Quantité</FormLabel>
                            <FormControl>
                              <Input 
                                type="number" 
                                {...field} 
                                onChange={(e) => {
                                  field.onChange(parseFloat(e.target.value) || 0);
                                  updateMontantTotal();
                                }}
                              />
                            </FormControl>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name={`lignes.${index}.prix_unitaire`}
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Prix unitaire</FormLabel>
                            <FormControl>
                              <Input 
                                type="number" 
                                step="0.01"
                                {...field} 
                                onChange={(e) => {
                                  field.onChange(parseFloat(e.target.value) || 0);
                                  updateMontantTotal();
                                }}
                              />
                            </FormControl>
                          </FormItem>
                        )}
                      />
                      
                      <div className="text-sm font-medium">
                        Total: ${((form.watch(`lignes.${index}.quantite`) || 0) * (form.watch(`lignes.${index}.prix_unitaire`) || 0)).toFixed(2)}
                      </div>
                      
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={() => removeLigne(index)}
                        disabled={form.watch('lignes').length === 1}
                      >
                        Supprimer
                      </Button>
                    </div>
                  ))}
                </div>

                <FormField
                  control={form.control}
                  name="montant_total"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Montant total</FormLabel>
                      <FormControl>
                        <Input type="number" step="0.01" {...field} readOnly />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="conditions_paiement"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Conditions de paiement</FormLabel>
                        <FormControl>
                          <Textarea {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="notes"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Notes</FormLabel>
                        <FormControl>
                          <Textarea {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <div className="flex justify-end space-x-2">
                  <Button type="button" variant="outline" onClick={() => setIsCreateDialogOpen(false)}>
                    Annuler
                  </Button>
                  <Button type="submit" disabled={createInvoice.isPending}>
                    {createInvoice.isPending ? "Création..." : "Créer la facture"}
                  </Button>
                </div>
              </form>
            </Form>
          </DialogContent>
        </Dialog>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Factures</CardTitle>
            <FileText className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{factures?.length || 0}</div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Factures Payées</CardTitle>
            <DollarSign className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {factures?.filter(f => f.statut === 'payee').length || 0}
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Montant Total</CardTitle>
            <DollarSign className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              ${factures?.reduce((sum, f) => sum + f.montant_total, 0).toFixed(2)}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Invoices Table */}
      <Card>
        <CardHeader>
          <CardTitle>Liste des factures</CardTitle>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Numéro</TableHead>
                <TableHead>Type</TableHead>
                <TableHead>Client</TableHead>
                <TableHead>Montant</TableHead>
                <TableHead>Statut</TableHead>
                <TableHead>Date</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {factures?.map((facture) => (
                <TableRow key={facture.id}>
                  <TableCell className="font-medium">{facture.numero_facture}</TableCell>
                  <TableCell>{getTypeBadge(facture.type_facture)}</TableCell>
                  <TableCell>{facture.client_nom}</TableCell>
                  <TableCell>${facture.montant_total.toFixed(2)}</TableCell>
                  <TableCell>{getStatusBadge(facture.statut)}</TableCell>
                  <TableCell>{new Date(facture.date_facture).toLocaleDateString()}</TableCell>
                  <TableCell>
                    <Button variant="outline" size="sm">
                      Voir détails
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}